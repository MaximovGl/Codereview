/*
Dynamic26. Даны указатели P1 и P2 на начало и конец очереди (если очередь является пустой,
то P1 = P2 = nullptr). Также дано число N (> 0) и набор из N чисел. Описать тип TQueue — запись
с двумя полями Head и Tail типа PNode (поля указывают на начало и конец очереди) — и
процедуру Enqueue(Q, D), которая добавляет в конец очереди Q новый элемент со значением D
(Q — входной и выходной параметр типа TQueue, D — входной параметр целого типа). С
помощью процедуры Enqueue добавить в исходную очередь данный набор чисел и вывести
новые адреса ее начала и конца.

Для каждой динамической структуры должен быть предусмотрен стандартный набор методов -
добавления/удаления/вывода элементов.
Во всех задачах обязательно наличие дружественного интерфейса. Ввод данных с клавиатуры.



В заданиях данной подгруппы структура «очередь» (queue) моделируется цепочкой связанных
узлов-записей типа TNode. Поле Next последнего элемента цепочки равно nullptr. Началом
очереди («головой», head) считается первый элемент цепочки, концом («хвостом», tail) — ее
последний элемент. Для возможности быстрого добавления в конец очереди нового элемента
удобно хранить, помимо указателя на начало очереди, также и указатель на ее конец. В случае
пустой очереди указатели на ее начало и конец полагаются равными nullptr. Как и для стека,
значением элемента очереди считается значение его поля Data.
*/
#include "queue.h"


int main()
{
    setlocale(LC_ALL, "Russian");
    int n;
    PNode p1 = input(n);
    show_initial_queue(p1);
    delete_n_elements(n, p1);
    show_new_queue(p1);
    return 0;
}
